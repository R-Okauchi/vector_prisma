from builtins import str as _str
from prisma import types
from typing_extensions import TypedDict

from . import vectors

{% for model in datamodel.models %}
# {{ model.name }} CreateInput
class {{ model.name }}CreateInput(types.{{ model.name }}CreateInput):
    """Required arguments to the {{ model.name }} create method"""
    {% for field in model.all_fields %}
        {%- if 'Unsupported' in field.type and 'vector' in field.type %}
{{'    '}}{{ field.name }}: vectors.{{ model.name }}Vector.Vector
        {% endif %}
    {% endfor %}


# {{ model.name }} UpdateInput
class {{ model.name }}UpdateInput(types.{{ model.name }}UpdateInput):
    """Required arguments to the {{ model.name }} update method"""
    {% for field in model.all_fields %}
        {%- if 'Unsupported' in field.type %}
{{'    '}}{{ field.name }}: vectors.{{ model.name }}Vector.Vector
        {% endif %}
    {% endfor %}


# {{ model.name }} UpsertInput
class {{ model.name }}UpsertInput(TypedDict):
    """Input for upserting {{ model.name }}"""
    create: '{{ model.name }}CreateInput'
    update: '{{ model.name }}UpdateInput'


{% endfor %}
